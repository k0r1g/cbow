# regression-helper-upload.py
# Uploads the Regression model checkpoint (.pth) and associated files
# from 02_train_reg.py to Hugging Face Hub.

from huggingface_hub import HfApi, login
import os
import glob
from pathlib import Path
import datetime

# --- Configuration ---
CHECKPOINTS_DIR = Path("checkpoints")
MODEL_PATTERN = "*.reg.pth"           # Pattern to find the regressor checkpoint
METADATA_FILE = Path("regressor_info.json") # Metadata file generated by 02_train_reg.py
README_FILE = Path("README.md")           # README file generated by 02_train_reg.py

REPO_ID = "Kogero/hackernews-score-regressor" # Target MODEL repository ID
PATH_IN_REPO_MODEL = "model.pth"              # Standard name for the model file in the repo
PATH_IN_REPO_METADATA = "regressor_info.json" # Path for metadata in the repo
PATH_IN_REPO_README = "README.md"             # Path for README in the repo
REPO_TYPE = "model"
# --- End Configuration ---

print("--- Regression Model Upload Helper ---")

# --- Find the latest checkpoint file ---
print(f"Searching for latest checkpoint in '{CHECKPOINTS_DIR}' matching '{MODEL_PATTERN}'...")
checkpoint_files = sorted(CHECKPOINTS_DIR.glob(MODEL_PATTERN), key=os.path.getmtime, reverse=True)

if not checkpoint_files:
    print(f"\n❌ ERROR: No checkpoint files matching '{MODEL_PATTERN}' found in '{CHECKPOINTS_DIR}'.")
    print("Did 02_train_reg.py run successfully and save a checkpoint?")
    exit(1)

local_checkpoint_path = checkpoint_files[0]
print(f"Found latest checkpoint: {local_checkpoint_path}")

# --- Check for other required files ---
files_to_upload = []
files_to_upload.append({
    "local_path": local_checkpoint_path,
    "repo_path": PATH_IN_REPO_MODEL,
    "commit_msg": f"Upload regressor model checkpoint: {local_checkpoint_path.name}"
})

if METADATA_FILE.is_file():
    print(f"Found metadata file: {METADATA_FILE}")
    files_to_upload.append({
        "local_path": METADATA_FILE,
        "repo_path": PATH_IN_REPO_METADATA,
        "commit_msg": "Upload regressor metadata"
    })
else:
    print(f"⚠️ Warning: Metadata file '{METADATA_FILE}' not found. It will not be uploaded.")

if README_FILE.is_file():
    print(f"Found README file: {README_FILE}")
    files_to_upload.append({
        "local_path": README_FILE,
        "repo_path": PATH_IN_REPO_README,
        "commit_msg": "Upload README/model card"
    })
else:
    print(f"⚠️ Warning: README file '{README_FILE}' not found. It will not be uploaded.")


# --- Proceed with Upload ---
print(f"\nTarget Hugging Face Repo: {REPO_ID} (type: {REPO_TYPE})")

try:
    print("\nLogging in to Hugging Face Hub (if needed)...")
    login() # Uses cached token or prompts

    print("Initializing HfApi...")
    api = HfApi()

    print(f"Ensuring repository '{REPO_ID}' exists...")
    api.create_repo(repo_id=REPO_ID, repo_type=REPO_TYPE, exist_ok=True)

    print("\nStarting uploads...")
    for file_info in files_to_upload:
        local = file_info["local_path"]
        repo = file_info["repo_path"]
        commit = file_info["commit_msg"]
        print(f"  Uploading {local.name} -> {REPO_ID}/{repo}")
        api.upload_file(
            path_or_fileobj=str(local),
            path_in_repo=repo,
            repo_id=REPO_ID,
            repo_type=REPO_TYPE,
            commit_message=commit
        )

    print(f"\n✅ Success! Files uploaded to: https://huggingface.co/{REPO_ID}")

except Exception as e:
    print(f"\n❌ An error occurred during upload: {e}")
    print("Please check your Hugging Face token/login and file paths.") 